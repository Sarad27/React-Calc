{"version":3,"sources":["Keypad/Keypad.js","Result/Result.js","History/History.js","App.js","serviceWorker.js","index.js"],"names":["buttons","props","name","assignedClasses","push","className","join","onClick","click","result","recent","value","history","values","map","key","toString","math","create","all","App","state","logs","reset","capturePressedKey","event","target","calculate","backspace","newArr","length","setState","calculation","recentArr","logsArr","newCalc","evaluate","replace","newValue","pop","keys","index","e","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ce9f1960.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Keypad.css'\r\n\r\nconst buttons = (props)=>{\r\n\r\n    const name = props.name;\r\n    const assignedClasses = ['button-light'];\r\n    const condition = (name === '(' || name === ')' || name === 'CE' || name === 'C' || name === '/' || name === '*' || name === '*' || name === '+' || name === '-');\r\n    \r\n    if(condition){\r\n        assignedClasses.push('button-shade')\r\n    }\r\n    if(name === '='){\r\n        assignedClasses.push('button-result');\r\n    }\r\n\r\n    return(\r\n        <div className = \"button\">\r\n            <button name={name} className ={assignedClasses.join(' ')} onClick = {props.click}>{name}</button>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default buttons;","import React from 'react';\r\nimport './Result.css';\r\n\r\nconst result = (props)=>{\r\n    return(\r\n        <div className = \"result\">\r\n            <p className =\"historyMuted\">{props.recent}</p>\r\n            <p className=\"answer\">{props.value}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default result;","import React from 'react';\r\nimport './History.css';\r\n\r\nconst history = (props)=>{\r\n\r\n    const values = [...props.value]\r\n    let history = null\r\n\r\n\r\n    history = (\r\n        <div >\r\n            {values.map((values) =>{\r\n                return (      \r\n                <p key={values.toString()}>{values}</p>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n    \r\n    return(\r\n        <div className=\"history\">\r\n            <p >Logs</p>\r\n            {history}\r\n        </div>\r\n       \r\n    )\r\n}\r\n\r\nexport default history;\r\n","import React,{Component} from 'react';\nimport ButtonKeys from './Keypad/Keypad';\nimport Result from './Result/Result';\nimport History from './History/History';\nimport { create, all } from 'mathjs'\nimport './App.css';\n\n\nconst config = { }\nconst math = create(all, config)\n\nclass App extends Component {\n\n  state={\n    values:[],\n    recent:[],\n    logs:[],\n    reset:false\n  }\n\n  capturePressedKey = (event)=>{\n    const key = event.target.name;\n    \n    if(key === '='){\n      this.calculate();\n    }\n    else if(key === 'C'){\n      this.reset();\n    }\n    else if(key === 'CE'){\n      this.backspace();\n    }\n    else{\n      const newArr = [...this.state.values]\n      if(this.state.reset === true){\n        if(key !== '/' && key !== '*' && key !== '+' && key !== '-' && key !=='(' && key !==')') {\n          newArr.length = 0\n        }\n        this.setState({reset:false})\n      }\n      newArr.push(key)\n      this.setState({values: newArr})\n    }\n  }\n\n  calculate = () =>{\n    const calculation = [...this.state.values]\n    const recentArr = [...this.state.recent]\n    const logsArr = [...this.state.logs]\n    logsArr.push(calculation)\n    recentArr.push(calculation)\n    const newCalc = math.evaluate(calculation.toString().replace(/\\,/g,\"\"));\n    this.setState({\n      values: [newCalc],\n      reset:true,\n      recent: recentArr,\n      logs:logsArr\n    })\n  }\n\n  reset = () =>{\n    this.setState({\n      values: [],\n      recent: []\n    })\n  }\n\n  backspace = ()=>{\n    const newValue = [...this.state.values]\n    newValue.pop()\n    this.setState({\n      values: newValue,\n      recent:[]\n    })\n  }\n\n\n  render(){\n    let buttons = null;\n    const keys = ['(',')','CE','C',7,8,9,'/',4,5,6,'*',1,2,3,'-',0,'.','=','+'];\n\n    buttons = (\n      <div>\n        {keys.map((keys,index)=>{\n          return <ButtonKeys \n          name = {keys}\n          key = {index}\n          click = {(e) => this.capturePressedKey(e)}\n          />\n        })}\n      </div>\n    )\n\n    return (\n      <div className=\"App\">\n        <h3>Calculator</h3>\n        <div className = \"calc-body\">\n        <Result value = {this.state.values} recent = {this.state.recent[this.state.recent.length-1]} />\n        {buttons}\n        <History value = {this.state.logs}/>\n        </div>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}